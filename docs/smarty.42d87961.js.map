{"mappings":"4NAKA,SAASA,EAAOC,GACdA,EAAMC,SAASC,GAKb,SAASF,GACTA,EAAMG,UAAUC,OAAS,CACvBC,QAAS,mBACTC,UAAW,CACTC,QAAS,WACTC,MAAO,eAETC,OAAQ,mCACRC,OAAQ,2DACRC,SAAU,CACR,cACA,cACA,CACEJ,QAAS,mBACTK,YAAY,GAEd,CACEL,QAAS,sBACTK,YAAY,IAGhBC,SAAU,CACR,CACEN,QAAS,qBACTK,YAAY,GAEd,gBACA,mBAEF,YAAa,CAEXL,QAAS,2BACTO,OAAQ,CACNH,SAAU,CACRJ,QAAS,kBACTK,YAAY,GAEdG,SAAU,MAGdC,YAAa,CAAC,mBACdD,SAAU,CACR,mCACA,iDACA,kDAEFE,QAAS,oCAEXjB,EAAMkB,MAAMC,IAAI,mBAAmB,SAASC,GAC1C,IAGIC,GAAqB,EACzBrB,EAAMG,UAAU,qBAAqBmB,kBACnCF,EACA,SANkB,kCAQlB,SAASG,GAKP,MAXoB,eAQhBA,IACFF,GAAqB,IAElBA,IAZiB,cAahBE,IACFF,GAAqB,IAEhB,EAGX,GAEJ,IACArB,EAAMkB,MAAMC,IAAI,kBAAkB,SAASC,GACzCpB,EAAMG,UAAU,qBAAqBqB,qBAAqBJ,EAAK,SACjE,GACF,CA3EE,CA2ECpB,EACL,CArFAyB,EAAAC,QAAiB3B,EACjBA,EAAO4B,YAAc,SACrB5B,EAAO6B,QAAU,E","sources":["node_modules/refractor/lang/smarty.js"],"sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = smarty\nsmarty.displayName = 'smarty'\nsmarty.aliases = []\nfunction smarty(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /* TODO\nAdd support for variables inside double quoted strings\nAdd support for {php}\n*/\n  ;(function(Prism) {\n    Prism.languages.smarty = {\n      comment: /\\{\\*[\\s\\S]*?\\*\\}/,\n      delimiter: {\n        pattern: /^\\{|\\}$/i,\n        alias: 'punctuation'\n      },\n      string: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      variable: [\n        /\\$(?!\\d)\\w+/,\n        /#(?!\\d)\\w+#/,\n        {\n          pattern: /(\\.|->)(?!\\d)\\w+/,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n          lookbehind: true\n        }\n      ],\n      function: [\n        {\n          pattern: /(\\|\\s*)@?(?!\\d)\\w+/,\n          lookbehind: true\n        },\n        /^\\/?(?!\\d)\\w+/,\n        /(?!\\d)\\w+(?=\\()/\n      ],\n      'attr-name': {\n        // Value is made optional because it may have already been tokenized\n        pattern: /\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,\n        inside: {\n          variable: {\n            pattern: /(=\\s*)(?!\\d)\\w+/,\n            lookbehind: true\n          },\n          operator: /=/\n        }\n      },\n      punctuation: [/[\\[\\]().,:`]|->/],\n      operator: [\n        /[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,\n        /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,\n        /\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/\n      ],\n      keyword: /\\b(?:false|off|on|no|true|yes)\\b/\n    } // Tokenize all inline Smarty expressions\n    Prism.hooks.add('before-tokenize', function(env) {\n      var smartyPattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g\n      var smartyLitteralStart = '{literal}'\n      var smartyLitteralEnd = '{/literal}'\n      var smartyLitteralMode = false\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'smarty',\n        smartyPattern,\n        function(match) {\n          // Smarty tags inside {literal} block are ignored\n          if (match === smartyLitteralEnd) {\n            smartyLitteralMode = false\n          }\n          if (!smartyLitteralMode) {\n            if (match === smartyLitteralStart) {\n              smartyLitteralMode = true\n            }\n            return true\n          }\n          return false\n        }\n      )\n    }) // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function(env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty')\n    })\n  })(Prism)\n}\n"],"names":["$914b315f55bb78dd$var$smarty","Prism","register","$949g8","languages","smarty","comment","delimiter","pattern","alias","string","number","variable","lookbehind","function","inside","operator","punctuation","keyword","hooks","add","env","smartyLitteralMode","buildPlaceholders","match","tokenizePlaceholders","module","exports","displayName","aliases"],"version":3,"file":"smarty.42d87961.js.map"}