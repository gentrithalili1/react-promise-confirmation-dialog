{"mappings":"mMAKA,SAASA,EAAKC,IACV,SAASA,GACTA,EAAMC,UAAUC,KAAOF,EAAMC,UAAUE,OAAO,MAAO,CAEnDC,QAAS,CACPC,QAAS,iDACTC,YAAY,KAGhBN,EAAMC,UAAUM,aAAa,OAAQ,SAAU,CAE7C,cAAe,CAEbF,QAAS,sBACTG,OAAQ,CACNC,OAAQ,+BAIPT,EAAMC,UAAUC,KAAKO,OAC5B,IAAIC,EAAW,yBACXC,EAAW,CACb,2CACA,CACEN,QAAS,eACTC,YAAY,IAGhBN,EAAMC,UAAUM,aAAa,OAAQ,WAAY,CAE/C,gBAAiB,CACfF,QAAS,eACTG,OAAQ,CACNI,YAAa,IACbF,SAAUA,EACVC,SAAUA,IAId,gBAAiB,CACfN,QAAS,sCACTG,OAAQ,CACNK,SAAU,CACR,kBACA,CACER,QAAS,aACTC,YAAY,IAGhBM,YAAa,IACbF,SAAUA,EACVC,SAAUA,EACVG,UAAWd,EAAMC,UAAUC,KAAKY,qBAI/Bd,EAAMC,UAAUC,KAAKW,gBACrBb,EAAMC,UAAUC,KAAKY,UAE5Bd,EAAMC,UAAUM,aAAa,OAAQ,cAAe,CAClDQ,SAAU,CACRV,QAAS,yEACTC,YAAY,IAGlB,CAhEE,CAgECN,EACL,CArEAgB,EAAAC,QAAiBlB,EACjBA,EAAKmB,YAAc,OACnBnB,EAAKoB,QAAU,E","sources":["node_modules/refractor/lang/sass.js"],"sourcesContent":["'use strict'\n\nmodule.exports = sass\nsass.displayName = 'sass'\nsass.aliases = []\nfunction sass(Prism) {\n  ;(function(Prism) {\n    Prism.languages.sass = Prism.languages.extend('css', {\n      // Sass comments don't need to be closed, only indented\n      comment: {\n        pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('sass', 'atrule', {\n      // We want to consume the whole line\n      'atrule-line': {\n        // Includes support for = and + shortcuts\n        pattern: /^(?:[ \\t]*)[@+=].+/m,\n        inside: {\n          atrule: /(?:@[\\w-]+|[+=])/m\n        }\n      }\n    })\n    delete Prism.languages.sass.atrule\n    var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    var operator = [\n      /[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,\n      {\n        pattern: /(\\s+)-(?=\\s)/,\n        lookbehind: true\n      }\n    ]\n    Prism.languages.insertBefore('sass', 'property', {\n      // We want to consume the whole line\n      'variable-line': {\n        pattern: /^[ \\t]*\\$.+/m,\n        inside: {\n          punctuation: /:/,\n          variable: variable,\n          operator: operator\n        }\n      },\n      // We want to consume the whole line\n      'property-line': {\n        pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\n        inside: {\n          property: [\n            /[^:\\s]+(?=\\s*:)/,\n            {\n              pattern: /(:)[^:\\s]+/,\n              lookbehind: true\n            }\n          ],\n          punctuation: /:/,\n          variable: variable,\n          operator: operator,\n          important: Prism.languages.sass.important\n        }\n      }\n    })\n    delete Prism.languages.sass.property\n    delete Prism.languages.sass.important // Now that whole lines for other patterns are consumed,\n    // what's left should be selectors\n    Prism.languages.insertBefore('sass', 'punctuation', {\n      selector: {\n        pattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\n        lookbehind: true\n      }\n    })\n  })(Prism)\n}\n"],"names":["$57ec5a0f263c56b9$var$sass","Prism","languages","sass","extend","comment","pattern","lookbehind","insertBefore","inside","atrule","variable","operator","punctuation","property","important","selector","module","exports","displayName","aliases"],"version":3,"file":"sass.1afd8e70.js.map"}