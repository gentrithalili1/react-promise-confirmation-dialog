{"mappings":"mMAKA,SAASA,EAAKC,IAOV,SAASA,GACTA,EAAMC,UAAUC,KAAOF,EAAMC,UAAUE,OAAO,QAAS,CACrDC,QAAS,CACP,MACA,CACEC,QAAS,0BACTC,QAAQ,IAGZC,QAAS,yRAEX,IAAIC,EAAgB,CAClBH,QAAS,aACTI,OAAQ,CACNC,UAAW,CACTL,QAAS,WACTM,MAAO,OAETC,KAAMZ,EAAMC,UAAUC,cAGnBF,EAAMC,UAAUC,KAAKW,SAC5Bb,EAAMC,UAAUa,aAAa,OAAQ,UAAW,CAC9CC,MAAO,CACL,CACEV,QAAS,+DACTC,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAGnB,CACEH,QAAS,wCACTC,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAGnB,CAEEH,QAAS,yDACTC,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAGnB,CACEH,QAAS,0CACTC,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAGnB,CACEH,QAAS,sCACTC,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAGnB,CACEH,QAAS,6EACTW,YAAY,EACZV,QAAQ,IAGZW,SAAU,+BACVC,OAAQ,CACNb,QAAS,mCACTW,YAAY,GAEd,oBAAqB,CACnBX,QAAS,mBACTW,YAAY,EACZP,OAAQ,CACNI,SAAU,OACVD,KAAMZ,EAAMC,UAAUC,SAI5BF,EAAMC,UAAUa,aAAa,OAAQ,SAAU,CAC7CK,QAAS,+OACTC,SAAU,0BAEZpB,EAAMC,UAAUC,KAAKmB,OAAS,CAC5B,CACEhB,QAAS,+DACTC,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAGnB,CACEH,QAAS,wCACTC,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAGnB,CAEEH,QAAS,yDACTC,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAGnB,CACEH,QAAS,0CACTC,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAGnB,CACEH,QAAS,sCACTC,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAGnB,CACEH,QAAS,2DACTC,QAAQ,EACRG,OAAQ,CACND,cAAeA,KAIrBR,EAAMC,UAAUqB,GAAKtB,EAAMC,UAAUC,IACvC,CAlIE,CAkICF,EACL,CA7IAuB,EAAAC,QAAiBzB,EACjBA,EAAK0B,YAAc,OACnB1B,EAAK2B,QAAU,CAAC,K","sources":["node_modules/refractor/lang/ruby.js"],"sourcesContent":["'use strict'\n\nmodule.exports = ruby\nruby.displayName = 'ruby'\nruby.aliases = ['rb']\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *      constant, builtin, variable, symbol, regex\n   */\n  ;(function(Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: [\n        /#.*/,\n        {\n          pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n          greedy: true\n        }\n      ],\n      keyword: /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\n    })\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.ruby\n      }\n    }\n    delete Prism.languages.ruby.function\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      regex: [\n        {\n          pattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          // Here we need to specifically allow interpolation\n          pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: {\n        pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n        lookbehind: true\n      },\n      'method-definition': {\n        pattern: /(\\bdef\\s+)[\\w.]+/,\n        lookbehind: true,\n        inside: {\n          function: /\\w+$/,\n          rest: Prism.languages.ruby\n        }\n      }\n    })\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/\n    })\n    Prism.languages.ruby.string = [\n      {\n        pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        // Here we need to specifically allow interpolation\n        pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }\n    ]\n    Prism.languages.rb = Prism.languages.ruby\n  })(Prism)\n}\n"],"names":["$1af17a4dcbe59c31$var$ruby","Prism","languages","ruby","extend","comment","pattern","greedy","keyword","interpolation","inside","delimiter","alias","rest","function","insertBefore","regex","lookbehind","variable","symbol","builtin","constant","string","rb","module","exports","displayName","aliases"],"version":3,"file":"ruby.bcdfcc81.js.map"}