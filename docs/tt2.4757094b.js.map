{"mappings":"4NAKA,SAASA,EAAIC,GACXA,EAAMC,SAASC,GACb,SAASF,GACTA,EAAMG,UAAUC,IAAMJ,EAAMG,UAAUE,OAAO,QAAS,CACpDC,QAAS,sBACTC,QAAS,0NACTC,YAAa,eAEfR,EAAMG,UAAUM,aAAa,MAAO,SAAU,CAC5CC,SAAU,iDACVC,SAAU,CACRC,QAAS,+CAGbZ,EAAMG,UAAUM,aAAa,MAAO,UAAW,CAC7CI,UAAW,CACTD,QAAS,sBACTE,MAAO,iBAGXd,EAAMG,UAAUM,aAAa,MAAO,SAAU,CAC5C,uBAAwB,CACtBG,QAAS,gCACTG,QAAQ,EACRD,MAAO,UAET,uBAAwB,CACtBF,QAAS,gCACTG,QAAQ,EACRD,MAAO,SACPE,OAAQ,CACNL,SAAU,CACRC,QAAS,wDAKVZ,EAAMG,UAAUC,IAAIa,OAC3BjB,EAAMkB,MAAMC,IAAI,mBAAmB,SAASC,GAE1CpB,EAAMG,UAAU,qBAAqBkB,kBACnCD,EACA,MAHe,kBAMnB,IACApB,EAAMkB,MAAMC,IAAI,kBAAkB,SAASC,GACzCpB,EAAMG,UAAU,qBAAqBmB,qBAAqBF,EAAK,MACjE,GACF,CA/CE,CA+CCpB,EACL,CArDAuB,EAAAC,QAAiBzB,EACjBA,EAAI0B,YAAc,MAClB1B,EAAI2B,QAAU,E","sources":["node_modules/refractor/lang/tt2.js"],"sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = tt2\ntt2.displayName = 'tt2'\ntt2.aliases = []\nfunction tt2(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function(Prism) {\n    Prism.languages.tt2 = Prism.languages.extend('clike', {\n      comment: /#.*|\\[%#[\\s\\S]*?%\\]/,\n      keyword: /\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|TAGS|THROW|TRY|SWITCH|UNLESS|USE|WHILE|WRAPPER)\\b/,\n      punctuation: /[[\\]{},()]/\n    })\n    Prism.languages.insertBefore('tt2', 'number', {\n      operator: /=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|or|not)\\b/,\n      variable: {\n        pattern: /[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*/i\n      }\n    })\n    Prism.languages.insertBefore('tt2', 'keyword', {\n      delimiter: {\n        pattern: /^(?:\\[%|%%)-?|-?%]$/,\n        alias: 'punctuation'\n      }\n    })\n    Prism.languages.insertBefore('tt2', 'string', {\n      'single-quoted-string': {\n        pattern: /'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,\n        greedy: true,\n        alias: 'string'\n      },\n      'double-quoted-string': {\n        pattern: /\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          variable: {\n            pattern: /\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i\n          }\n        }\n      }\n    }) // The different types of TT2 strings \"replace\" the C-like standard string\n    delete Prism.languages.tt2.string\n    Prism.hooks.add('before-tokenize', function(env) {\n      var tt2Pattern = /\\[%[\\s\\S]+?%\\]/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'tt2',\n        tt2Pattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function(env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'tt2')\n    })\n  })(Prism)\n}\n"],"names":["$2831e69aa961c5fc$var$tt2","Prism","register","$949g8","languages","tt2","extend","comment","keyword","punctuation","insertBefore","operator","variable","pattern","delimiter","alias","greedy","inside","string","hooks","add","env","buildPlaceholders","tokenizePlaceholders","module","exports","displayName","aliases"],"version":3,"file":"tt2.4757094b.js.map"}