{"mappings":"4NAKA,SAASA,EAAIC,GACXA,EAAMC,SAASC,GACb,SAASF,GACT,IAAIG,EAAgB,iDAChBC,EAAgB,oDACpBJ,EAAMK,UAAUC,IAAM,CACpBC,QAAS,CACP,mBACA,CACEC,QAAS,aACTC,YAAY,EACZC,QAAQ,IAGZ,cAAe,CACbF,QAAS,yFACTC,YAAY,EACZE,MAAO,SACPC,OAAQ,CACNC,YAAa,OAGjBC,UAAW,CACTN,QAAS,mCACTC,YAAY,EACZE,MAAO,YAETI,QAAS,CACP,CACEP,QAAS,kNACTC,YAAY,GAEd,2FAEFO,UAAW,CACTR,QAAS,gBACTG,MAAO,eAETM,SAAU,WACVC,SAAU,CACRV,QAAS,0CACTI,OAAQ,CACNO,OAAQ,CACNX,QAASL,EACTO,QAAQ,GAEVU,OAAQhB,EACRS,YAAa,aAGjBM,OAAQ,CACNX,QAASL,EACTO,QAAQ,GAEVW,SAAU,CACR,YACA,CACEb,QAAS,oBACTC,YAAY,IAGhBa,QAAS,qBACTF,OAAQhB,EACRmB,SAAU,iDACVV,YAAa,kBAEfb,EAAMwB,MAAMC,IAAI,mBAAmB,SAASC,GAC1C,IAGIC,GAAkB,EACtB3B,EAAMK,UAAU,qBAAqBuB,kBACnCF,EACA,MANe,4CAQf,SAASG,GAKP,MAXiB,eAQbA,IACFF,GAAkB,IAEfA,IAZc,cAabE,IACFF,GAAkB,IAEb,EAGX,GAEJ,IACA3B,EAAMwB,MAAMC,IAAI,kBAAkB,SAASC,GACzC1B,EAAMK,UAAU,qBAAqByB,qBAAqBJ,EAAK,MACjE,GACF,CA3FE,CA2FC1B,EACL,CAjGA+B,EAAAC,QAAiBjC,EACjBA,EAAIkC,YAAc,MAClBlC,EAAImC,QAAU,E","sources":["node_modules/refractor/lang/soy.js"],"sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = soy\nsoy.displayName = 'soy'\nsoy.aliases = []\nfunction soy(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function(Prism) {\n    var stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/\n    var numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/\n    Prism.languages.soy = {\n      comment: [\n        /\\/\\*[\\s\\S]*?\\*\\//,\n        {\n          pattern: /(\\s)\\/\\/.*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      'command-arg': {\n        pattern: /({+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      parameter: {\n        pattern: /({+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      keyword: [\n        {\n          pattern: /({+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n          lookbehind: true\n        },\n        /\\b(?:any|as|attributes|bool|css|float|in|int|js|html|list|map|null|number|string|uri)\\b/\n      ],\n      delimiter: {\n        pattern: /^{+\\/?|\\/?}+$/,\n        alias: 'punctuation'\n      },\n      property: /\\w+(?==)/,\n      variable: {\n        pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+]))*/,\n        inside: {\n          string: {\n            pattern: stringPattern,\n            greedy: true\n          },\n          number: numberPattern,\n          punctuation: /[\\[\\].?]/\n        }\n      },\n      string: {\n        pattern: stringPattern,\n        greedy: true\n      },\n      function: [\n        /\\w+(?=\\()/,\n        {\n          pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n          lookbehind: true\n        }\n      ],\n      boolean: /\\b(?:true|false)\\b/,\n      number: numberPattern,\n      operator: /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n      punctuation: /[{}()\\[\\]|.,:]/\n    } // Tokenize all inline Soy expressions\n    Prism.hooks.add('before-tokenize', function(env) {\n      var soyPattern = /{{.+?}}|{.+?}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g\n      var soyLitteralStart = '{literal}'\n      var soyLitteralEnd = '{/literal}'\n      var soyLitteralMode = false\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'soy',\n        soyPattern,\n        function(match) {\n          // Soy tags inside {literal} block are ignored\n          if (match === soyLitteralEnd) {\n            soyLitteralMode = false\n          }\n          if (!soyLitteralMode) {\n            if (match === soyLitteralStart) {\n              soyLitteralMode = true\n            }\n            return true\n          }\n          return false\n        }\n      )\n    }) // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function(env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy')\n    })\n  })(Prism)\n}\n"],"names":["$5a221a716990a592$var$soy","Prism","register","$949g8","stringPattern","numberPattern","languages","soy","comment","pattern","lookbehind","greedy","alias","inside","punctuation","parameter","keyword","delimiter","property","variable","string","number","function","boolean","operator","hooks","add","env","soyLitteralMode","buildPlaceholders","match","tokenizePlaceholders","module","exports","displayName","aliases"],"version":3,"file":"soy.4d06a07b.js.map"}